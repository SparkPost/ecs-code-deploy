#!/usr/bin/env bash

#######################################################################
# This script performs deployment of ECS Service using AWS CodeDeploy
#
# Heavily inspired by https://github.com/silinternational/ecs-deploy
#
# Author: Ike Wachuku
# URL: https://github.com/noctis25
#######################################################################

set -e

#set -x

readonly APPSPEC_FILENAME="appspec_ecs.yaml"
readonly TASK_DEF_FILENAME="task_def.json"

function print_usage {
  echo
  echo "Usage: ecs-codedeploy [OPTIONS]"
  echo
  echo "This script performs deployment of ECS Service using AWS CodeDeploy."
  echo
  echo "'aws deploy create-deployment' should be used, as described here: https://docs.aws.amazon.com/cli/latest/reference/deploy/create-deployment.html"
  echo
  echo "Required arguments:"
  echo
  echo -e "  --cluster\t\t\tName of ECS Cluster"
  echo -e "  --region\t\t\tName of ECS region"
  echo -e "  --service\t\t\tName of ECS Service to update"
  echo -e "  --image\t\t\tImage ID to deploy (eg, 640673857988.dkr.ecr.eu-central-1.amazonaws.com/backend:v1.2.3)"
  echo -e "  --deploy_app\t\t\tCodeDeploy application"
  echo -e "  --container_name\t\t\tName of Container to deploy"
  echo -e "  --container_port\t\t\tPort of the Container to deploy"
  echo -e "  --deploy_group\t\t\tGroup of the CodeDeploy Application"
  echo
  echo
  echo "Examples:"
  echo
  echo "  ecs-codedeploy --cluster production --region us-west-2 --service backend --image 640673857988.dkr.ecr.eu-central-1.amazonaws.com/backend:v1.2.3"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    echo "ERROR: The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_is_installed {
  local readonly name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    echo "ERROR: The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function assumeRole() {
  temp_role=$(aws sts assume-role --profile \
                  --role-arn "${AWS_ASSUME_ROLE}" \
                  --role-session-name "$(date +"%s")")

  export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
  export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
  export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
}

function assumeRoleClean() {
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
}

function get_current_task_definition() {
  TASK_DEFINITION_ARN=$(aws ecs describe-services --services "$service" --cluster "$cluster" --region "$region" | jq -r ".services[0].taskDefinition")
  echo $TASK_DEFINITION_ARN
  TASK_DEFINITION=$(aws ecs describe-task-definition --region "$region" --task-def "$TASK_DEFINITION_ARN")
}

function create_new_task_def_json() {
  DEF=$(echo "$TASK_DEFINITION" | jq -r ".taskDefinition.containerDefinitions[].image=\"$image\"" | jq -r ".taskDefinition")

  # Default JQ filter for new task definition
  NEW_DEF_JQ_FILTER="family: .family, volumes: .volumes, containerDefinitions: .containerDefinitions, placementConstraints: .placementConstraints"

  # Some options in task definition should only be included in new definition if present in
  # current definition. If found in current definition, append to JQ filter.
  CONDITIONAL_OPTIONS=(networkMode taskRoleArn placementConstraints)
  for i in "${CONDITIONAL_OPTIONS[@]}"; do
    re=".*${i}.*"
    if [[ "$DEF" =~ $re ]]; then
      NEW_DEF_JQ_FILTER="${NEW_DEF_JQ_FILTER}, ${i}: .${i}"
    fi
  done

  # Updated jq filters for AWS Fargate
  REQUIRES_COMPATIBILITIES=$(echo "${DEF}" | jq -r ". | select(.requiresCompatibilities != null) | .requiresCompatibilities[]")
  if [[ "${REQUIRES_COMPATIBILITIES}" == 'FARGATE' ]]; then
    FARGATE_JQ_FILTER='executionRoleArn: .executionRoleArn, requiresCompatibilities: .requiresCompatibilities, cpu: .cpu, memory: .memory'
    NEW_DEF_JQ_FILTER="${NEW_DEF_JQ_FILTER}, ${FARGATE_JQ_FILTER}"
  fi

  # Build new DEF with jq filter
  NEW_DEF=$(echo "$DEF" | jq "{${NEW_DEF_JQ_FILTER}}")

  # If in test mode output $NEW_DEF
  if [ "$BASH_SOURCE" != "$0" ]; then
    echo "$NEW_DEF"
  fi
}

function create_task_def_file() {
  echo "$NEW_DEF" > $TASK_DEF_FILENAME
}

function register_new_task_definition() {
    # Register the new task definition, and store its ARN
    NEW_TASKDEF=`aws ecs register-task-definition --region "$region" --cli-input-json "$NEW_DEF" | jq -r .taskDefinition.taskDefinitionArn`
}

# The PlaceholderForTaskDefinition placeholder will be updated within the appspec with the newly registered task definition ARN
function create_app_spec_file() {
  echo "---
version: 1
Resources:
- TargetService:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: PlaceholderForTaskDefinition
      LoadBalancerInfo:
        ContainerName: ${container_name}
        ContainerPort: 3001
" > $APPSPEC_FILENAME
}

# one liner that deploys based on aws ecs deploy, change line 298 if you would like to use this
# https://docs.aws.amazon.com/cli/latest/reference/ecs/deploy/index.html
function ecs_deploy_service() {
  aws ecs deploy \
          --cluster "$cluster" \
          --region "$region" \
          --service "$service" \
          --task-definition "$TASK_DEF_FILENAME" \
          --codedeploy-appspec "$APPSPEC_FILENAME" \
          --codedeploy-application "$deploy_app" \
          --codedeploy-deployment-group "$deploy_group"
}

function ecs_create_deployment() {
DEPLOY_WAIT_TIME=`aws deploy get-deployment-group \
    --application-name "$deploy_app" \
    --deployment-group-name "$deploy_group" \
    --region "$region" \
    --query "deploymentGroupInfo.blueGreenDeploymentConfiguration.terminateBlueInstancesOnDeploymentSuccess.terminationWaitTimeInMinutes" \
    --output text`

TOTAL_WAIT_TIME_MINUTES=$((DEPLOY_WAIT_TIME + 15))
TOTAL_WAIT_TIME_SECONDS=$(((DEPLOY_WAIT_TIME + 15) * 60))

DEPLOYMENT_ID=`aws deploy create-deployment \
        --application-name "$deploy_app" \
        --deployment-group-name "$deploy_group" \
        --region "$region" \
        --deployment-config-name "$deployment_config_name" \
        --description "$service Blue/Green Deploy" \
        --revision '{"revisionType": "AppSpecContent", "appSpecContent": {"content": "{\"version\": 1, \"Resources\": [{\"TargetService\": {\"Type\": \"AWS::ECS::Service\", \"Properties\": {\"TaskDefinition\": \"'${NEW_TASKDEF}'\", \"LoadBalancerInfo\": {\"ContainerName\": \"'${container_name}'\", \"ContainerPort\":'${container_port}'}}}}]}"}}' \
        --query "deploymentId" \
        --output text`

  #todo - add a timestamp here - restore
  echo "waiting ${TOTAL_WAIT_TIME_MINUTES} minutes for the deploy to complete"
  sleep ${TOTAL_WAIT_TIME_SECONDS}

  echo "checking for deploy completion..."     
  aws deploy wait deployment-successful --deployment-id "$DEPLOYMENT_ID" --region "$region"

  echo "deployment complete." 

}

#function waitDeployment() {
#  aws deploy wait deployment-successful --deployment-id d-LKDSY5WVV
#}

function ecs_deploy {
  assert_is_installed "jq"

  local cluster=""
  local region=""
  local service=""
  local deploy_app=""
  local container_name=""
  local container_port=""
  local deploy_group=""
  local image=""
  local iam_role=""
  local deployment_config_name=""

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --deployment_config_name)
        deployment_config_name="$2"
        shift
        ;;
      --iam-role)
        iam_role="$2"
        shift
        ;;
      --cluster)
        cluster="$2"
        shift
        ;;
      --region)
        region="$2"
        shift
        ;;
      --service)
        service="$2"
        shift
        ;;
      --deploy_app)
        deploy_app="$2"
        shift
        ;;
      --container_name)
        container_name="$2"
        shift
        ;;
      --container_port)
        container_port="$2"
        shift
        ;;
      --deploy_group)
        deploy_group="$2"
        shift
        ;;
      --image)
        image="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        echo "ERROR: Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--cluster" "$cluster"
  assert_not_empty "--region" "$region"
  assert_not_empty "--service" "$service"
  assert_not_empty "--image" "$image"
  assert_not_empty "--deploy_app" "$deploy_app"
  assert_not_empty "--container_name" "$container_name"
  assert_not_empty "--container_port" "$container_port"
  assert_not_empty "--deploy_group" "$deploy_group"

  if [[ -z "$deployment_config_name" ]]; then
    deployment_config_name="CodeDeployDefault.ECSLinear10PercentEvery1Minutes"
  fi

  # Use specified IAM role or the one which comes from global env variables
  local AWS_ASSUME_ROLE=${iam_role:-${AWS_ROLE_TO_ASSUME_DURING_DEPLOY:-false}}

  echo "Cluster: $cluster"
  echo "Region: $region"
  echo "Service: $service"
  echo "Image: $image"
  echo "Deployment_config_name: $deployment_config_name"
  echo


  if [[ "$AWS_ASSUME_ROLE" != false ]]; then
    echo "Assuming IAM role: $AWS_ASSUME_ROLE"
    assumeRole
    echo "Assumed successfully"
    echo
  fi

  echo "Getting current task definition for the service $service"
  get_current_task_definition

  echo "Task definition ARN: $TASK_DEFINITION_ARN"
  echo

  echo "Create new task definition"
  create_new_task_def_json
  echo "Created"
  echo

  register_new_task_definition
  echo "New task definition: $NEW_TASKDEF";

  echo "Create file $TASK_DEF_FILENAME"
  create_task_def_file
  echo "Created"
  echo

  echo "Create file $APPSPEC_FILENAME"
  create_app_spec_file
  echo "Created"
  echo

  echo "Deploy ECS service"
  ecs_create_deployment
  echo "Done!"


  if [[ "$AWS_ASSUME_ROLE" != false ]]; then
    assumeRoleClean
  fi
}

ecs_deploy "$@"